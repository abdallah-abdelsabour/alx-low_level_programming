!<arch>
lib.c/          0           0     0     644     650       `
int _putchar(char c);
int _islower(int c);
int _isalpha(int c);
int _abs(int n);
int _isupper(int c);
int _isdigit(int c);
int _strlen(char *s);
void _puts(char *s);
char *_strcpy(char *dest, char *src);
int _atoi(char *s);
char *_strcat(char *dest, char *src);
char *_strncat(char *dest, char *src, int n);
char *_strncpy(char *dest, char *src, int n);
int _strcmp(char *s1, char *s2);
char *_memset(char *s, char b, unsigned int n);
char *_memcpy(char *dest, char *src, unsigned int n);
char *_strchr(char *s, char c);
unsigned int _strspn(char *s, char *accept);
char *_strpbrk(char *s, char *accept);
char *_strstr(char *haystack, char *needle);
0-isupper.c/    0           0     0     644     207       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: the character to be checked
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

0-memset.c/     0           0     0     644     270       `
#include <stdio.h>
/*
 * _memset = copy set value
 * @s: some another thing 
 * @b: some thing
 * @i: some thing here 
 * Return nothing
 */

char *_memset(char *s , char b ,unsigned int n)
{
	unsigned int i;
	
	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return(s);

}

0-strcat.c/     0           0     0     644     409       `
#include "main.h"
/**
*_strcat - function that concatenates two strings.
*@dest: pointer to destination string.
*@src: pointer to source string.
*
*Return: pointer to destination string.
 */
char *_strcat(char *dest, char *src)
{
int length, j;

length = 0;
while (dest[length] != '\0')
{
length++;
}
for (j = 0; src[j] != '\0'; j++, length++)
{
dest[length] = src[j];
}
dest[length] = '\0';
return (dest);
}

1-isdigit.c/    0           0     0     644     197       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: int to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     258       `
#include <stdio.h>
/*
 * _memcpy - copy constant
 * @dest: cpy dest
 * @src: src destinatio
 * @n: number of n 
 */
char *_memcpy(char *dest ,char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];

	}
	return(dest);
}
1-strncat.c/    0           0     0     644     674       `
#include "main.h"
/**
 *_strncat - function that concatenates two strings. it will use
 * at most n bytes from src. src does not need to be null terminated.
 *@dest: pointer to destination string.
 *@src: pointer to source string.
 *@n: number of bytes to be concatenated.
 *
 *Return: pointer to destination string.
 */
char *_strncat(char *dest, char *src, int n)
{
	int length, j;
/* j is a counter for  n bytes of src to be concatenated */
/* length = length of destination string */

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; j < n && src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     251       `
#include <stdio.h>
/*
 * char * _strchr - locate str first 
 * @s: sring pointer to string 
 * @c: char looking for
 */
char *_strchr(char *s ,char c)
{
	int i;
	while (s[i++] != '\0')
	{
		if (s[i] == c)
		{
			return(&s[i]);
		}
	}
	return(NULL);
}

2-strlen.c/     0           0     0     644     240       `
#include <stdio.h>
/**
 * _strlen - return string length
 * @s: string want to return length
 * Return: int
 *
 *
 */

int _strlen(char *s)
{
	int l;

	l = 0;
	while (1)
	{
		l++;
		if (*(s + l) == '\0')
		{
			break;
		}
	}
	return (l);
}
2-strncpy.c/    0           0     0     644     618       `
#include "main.h"
/**
*_strncpy - a function that copies a string.
*at most n bytes of src are copied.
*if length of src is < n, additional null bytes are written to dest
*to ensure that a total of n bytes are written.
*@dest: pointer to destination string.
*@src: pointer to source string.
*@n: number of bytes to be used.
*
* Return: pointer to destination string.
*/
char *_strncpy(char *dest, char *src, int n)
{
int byteCount;

for (byteCount = 0; byteCount < n && src[byteCount] != '\0'; byteCount++)
dest[byteCount] = src[byteCount];
for (; byteCount < n; byteCount++)
dest[byteCount] = '\0';

return (dest);
}
3-islower.c/    0           0     0     644     207       `
#include "main.h"
/**
 * print_alphabet print alpha from a -> z
 * Return: void value
 */
int _islower(int c)
{	
	int l;
	for (l = 'a'; l <= 'z'; l++)
	{
	if (c == l)
	{
		return(1);
	}	
	
	}
	return(0);

}

3-puts.c/       0           0     0     644     227       `
#include <stdio.h>
/**
 * _strlen - putchar returns
 * @str: pointer to the string
 * Return: void
 *
 *
 */

void _puts(char *str)
{
	int l;
	
	l = 0;
	while(str[l] != '\0')
	{
			putchar(str[l]);
			l++;
	}
	putchar('\n');
}

3-strcmp.c/     0           0     0     644     483       `
#include "main.h"
/**
 *_strcmp - compares two strings.
 *@s1: pointer to first string.
 *@s2: pointer to second string.
 *
 *Return: value less than 0 if string is less than the other.
 *value greater than 0 if string is greater than the other.
 *0 if strings are equal.
 */
int _strcmp(char *s1, char *s2)
{
	int counter, cmpVal;

	counter = 0;
	while (s1[counter] == s2[counter] && s1[counter] != '\0')
	{
		counter++;
	}

	cmpVal = s1[counter] - s2[counter];
	return (cmpVal);
}

4-isalpha.c/    0           0     0     644     275       `
#include "main.h"
/**
 * print_alphabet print alpha from a -> z
 * Return: void value
 */
int _isalpha(int c)
{	
	int f;
	
	f='A';
	while (f <= 'Z')
	{
	
		int l;

		for (l = 'a'; l <= 'z'; l++)
		{
		if (c == l|| c == f)
		{
			return(1);
		}	
		}

		f++;
	}
	return(0);

}

6-abs.c/        0           0     0     644     223       `
#include "main.h"
/**
 * print_alphabet print alpha from a -> z
 * Return: void value
 */
int _abs(int n)
{
	if (n > 0)
	{
		return(n);
	}
	if(n == 0)
	{
		return(0);
	}	
	if (n < 0)
	{
		return(-1 * n );
	}
	return(0);

}

9-strcpy.c/     0           0     0     644     298       `
#include <stdio.h>
/**
 * _strcpy - putchar in reverse order
 * @dest: pointer to the string
 * @src: pointer to the string
 * Return: void
 *
 *
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i++] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     266       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
